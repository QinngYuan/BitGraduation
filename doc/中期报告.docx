主要研究内容

　　　本毕设的目标是实现一种基于软硬件的FPGA与CPU通信接口，在保留CPU与FPGA通信的优势的前提下，一方面希望提高对CPU计算资源的利用率，节省FPGA资源损耗；另一方面希望增强CPU对FPGA调用的灵活程度，提高计算性能，在现代计算任务中，软硬件协同工作的重要性不言而喻，这个接口将为软硬件协同设计提供良好的解决方案。同时，定义一个具备可移植性的接口规范，便于软件与硬件程序员的使用。本毕业设计的核心目标是构建一个高效的FPGA与CPU通信接口，这个接口不仅要保留现有通信的优势，更要在提高计算资源利用率和节省硬件资源损耗方面迈出创新的步伐。通过这种接口，我们可以实现更加灵活的CPU对FPGA的调用，从而显著提升整体的计算性能。
　　　在CPU调用FPGA上本毕设希望实现一个近似系统调用的函数调用接口，将FPGA视为一种外设，通过修改内核的系统调用，使得能够简单的处理FPGA上的计算任务，并为软件程序员提供一个用户良好的api接口。在设计这一通信接口时，我们特别强调了可移植性。这意味着我们定义的接口规范将能够适应不同的软硬件环境，使得软件与硬件程序员能够无缝地进行交互。软件程序员只需按照函数调用规定的方式给出一系列参数，即长度、数据地址、参数形式等，就可以便捷的使用FPGA完成计算任务。以系统调用的方式将函数调用进行封装，能够提高os对其的处理效率，也便于通过中断的方式进行CPU与FPGA间的通信。
　　　在FPGA调用CPU上，本毕设希望FPGA也能以函数调用的形式调用CPU辅助完成计算任务，在CPU内给定函数调用后，FPGA将自身不能执行的复杂计算发给CPU，在CPU内这些计算以函数的形式存在，CPU进行计算后将数据返回给FPGA。以此方式充分发挥CPU的优势，节省FPGA的计算资源。
　　　此外，我们还考虑了如何通过中断机制来优化CPU与FPGA之间的通信。这种方法不仅能够减少系统的延迟，还能够确保数据传输的实时性和可靠性。而系统调用则能将中断的方式与原有的操作系统联系起来，通过对操作系统内核系统调用的重新编写，能够利用原有的操作系统的优良中断处理机制，提高FPGA与CPU间的通信效率。

进展情况

　　　在当前的研究进展中，我们已经成功地将矩阵乘法和矩阵加法的运算通过Xilinx公司提供的内置IP核进行了部署。这一重要步骤不仅标志着我们在硬件加速领域的突破，也为CPU与FPGA之间的高效通信奠定了基础。在我们的设计中，CPU端能够通过指定函数调用参数的首地址和参数长度来调用FPGA内部的计算模块，这一过程的简便性极大地提高了开发效率。
　　　为了实现模块的快速识别和调用，我们采用了内置的多通道直接内存访问（Multi Direct Memory Access, MDMA）核心技术。开发人员只需提供相应的IP号，就能够实现对特定模块的调用，从而执行所需的计算任务。这种方法的高度自动化和精确性，使得计算过程更加高效和可靠。
　　　在硬件设计方面，我们利用Vivado软件提供的自制IP核功能，对FIFO模块的输入与输出端进行了状态机的改写。这一改进不仅优化了数据流的管理，还为后续的扩展提供了便利。此外，我们还在FPGA内部集成了Xilinx封装的加法与乘法模块，以实现更高效的运算处理。
　　　在软件开发端，我们完成了基本的函数调用编写工作，并将乘法与加法模块，以及调用FPGA的模块作为独立的函数提取出来。这些函数被整合到一个头文件中，使得在实际应用中，开发人员只需引用这个头文件，就可以轻松地利用FPGA来完成计算任务。这种设计大大简化了软件开发的复杂性，并提高了代码的可重用性。
　　　在操作系统层面，我们安装了PetaLinux工具，并对当前完成的工程文件进行了编译，成功构建了一个Linux内核。这个内核不仅可以在实际硬件上运行，还能够在QEMU模拟器上进行模拟运行。这为我们的设计提供了一个强大的验证平台，确保了系统的稳定性和可靠性。
　　　综上所述，我们的设计不仅实现了CPU与FPGA之间的高效通信，还提供了一个可扩展、易于使用的计算平台。这将极大地促进软硬件协同工作的发展，为未来的计算任务提供了新的解决方案。我们期待着这一设计在实际应用中的表现，并将继续优化和完善我们的系统，以满足日益增长的计算需求。
取得成果

　　　在当前的技术发展中，矩阵加法与乘法的运算效率是衡量计算能力的重要指标。传统的软件端运算虽然灵活，但在处理大规模数据时往往受限于处理速度。而本设计表明，通过将这些运算任务转移到硬件端，尤其是采用现场可编程门阵列（FPGA）技术，可以实现对运算速度的显著提升。具体来说，使用FPGA进行矩阵运算，不仅可以达到软件运算速度的几百倍，还能为软件开发人员提供更高效的编程环境。
　　　此外，这种基于FPGA的计算方法还具有良好的可扩展性。硬件设计师只需将计算任务模块化，为每个模块分配一个唯一的标识符（id号），就能轻松地在现有硬件架构上添加或更新计算模块。这种设计不仅优化了资源的使用，还为未来的技术升级提供了便利，使得硬件能够适应日益增长的计算需求和不断变化的技术环境。
　　　总的来说，FPGA的引入不仅提高了矩阵运算的效率，还为软件开发人员带来了便利，同时也为硬件设计的未来发展打下了坚实的基础。随着技术的进步，我们可以预见，基于FPGA的计算方法将在数据处理和高性能计算领域扮演越来越重要的角色。
存在问题与拟解决方案

　　　在我们的FPGA与CPU通信接口毕业设计中，目前面临的挑战主要集中在三个方面：设计的完善、系统调用的集成以及效率的评估。
　　　首先，FPGA调用CPU的设计仍处于编写阶段。这是一个复杂的过程，涉及到硬件与软件的深度融合。我们的目标是创建一个能够让FPGA以最小的延迟调用CPU的接口，这不仅要求我们对FPGA和CPU的工作原理有深刻的理解，还需要我们编写高效且可靠的代码。为了实现这一目标，我们计划采取分阶段的开发策略，首先确保基本的调用机制稳定运行，然后逐步引入更复杂的功能。
　　　其次，板上Linux系统调用的添加是另一个关键点。我们需要将封装好的函数调用转化为系统调用并集成进Linux内核中。这一过程不仅需要对Linux内核有深入的了解，还需要掌握如何安全地修改内核代码。为了克服这一挑战，我们计划进行系统的学习和实践，通过模拟环境进行测试，确保新加入的系统调用不会影响内核的稳定性。
　　　最后，效率检测实验的设计也至关重要。我们希望通过精细化的实验方案来全面评估接口的效率。这不仅包括基本的性能测试，如延迟和吞吐量的测量，还包括在不同的应用场景下对接口性能的评估。我们计划设计一系列的实验，包括基准测试和真实世界应用的模拟，以确保我们的接口能够在各种条件下提供优异的性能。
　　　总体而言，虽然我们的毕业设计还面临着一些挑战，但我们有信心通过持续的努力和创新，能够克服这些困难。我们相信，一旦这些问题得到解决，我们的设计将能够为FPGA与CPU通信提供一个高效、灵活且可扩展的解决方案，从而推动整个计算领域向前发展。我们期待着在不久的将来，能够看到我们的接口在实际应用中发挥其强大的潜力。
下一步研究任务与进度安排

接下来的任务可以概括为以下几个主要阶段：
操作系统安装与调试：完成板上操作系统的安装，并在虚拟环境中进行全面调试，确保系统稳定运行。
冒泡排序IP核封装：对冒泡排序算法进行IP核封装，以便在FPGA上实现高效计算。
DMA模块改进：对现有的DMA模块进行修改，实现多路DMA功能，以支持更复杂的数据传输需求。
功能模块扩展：增加FFT（快速傅里叶变换）模块和矩阵加法模块，以拓展系统的计算能力。
系统调用的内核修改：对操作系统内核进行修改，增加新的系统调用，以便更好地支持FPGA与CPU之间的通信。
板上测试：在实际硬件上测试内核功能，确保新加入的系统调用能够正常工作。
性能测试：对函数调用的性能进行测试，评估系统调用的效率和响应时间。
文档撰写：在完成所有技术任务后，撰写论文，总结研究成果和经验教训。
2024年4月9日~2024年4月11日 完成板上操作系统安装，并在虚拟机上进行调试
2024年4月11日~2024年4月13日 完成冒泡排序IP核的封装
2024年4月14日~2024年4月16日 修改dma模块为多路dma
2024年4月16日~2024年4月20日 扩展功能，增加FFT模块，矩阵加法模块
2024年4月21日~2024年4月23日 修改内核，增加系统调用
2024年4月24日~2024年4月26日 板上测试内核功能是否正常
2024年4月26日~2024年4月30日 测试函数调用性能
2024年5月1日-5月3日     假期预留
2024年5月3日-2024年5月20日 写论文